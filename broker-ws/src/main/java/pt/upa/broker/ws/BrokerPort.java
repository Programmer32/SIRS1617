
package pt.upa.broker.ws;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.registry.JAXRException;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;
import pt.upa.transporter.ws.BadJobFault_Exception;
import pt.upa.transporter.ws.BadLocationFault_Exception;
import pt.upa.transporter.ws.BadPriceFault_Exception;
import pt.upa.transporter.ws.JobStateView;
import pt.upa.transporter.ws.JobView;
import pt.upa.transporter.ws.cli.TransporterClient;
import pt.upa.ui.Dialog;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.10
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BrokerPortType", targetNamespace = "http://ws.broker.upa.pt/")
@XmlSeeAlso({
    ObjectFactory.class
})
public class BrokerPort implements BrokerPortType {

	private static final String[] NORTE = { "Porto", "Braga", "Viana do Castelo", "Vila Real", "Bragança" };
	private static final String[] CENTRO = { "Lisboa", "Leiria", "Castelo Branco", "Coimbra", "Aveiro", "Viseu", "Guarda" };
	private static final String[] SUL = { "Setúbal", "Évora", "Portalegre", "Beja", "Faro" };
	
	private String _uddiURL;
	private UDDINaming _uddiNaming;
	private Map<String, TransportView> _transports;
	
	public BrokerPort(String uddiURL) throws JAXRException{
		Dialog.IO().debug(this.getClass().getSimpleName(), "Creating BrokerPort");
		_uddiURL = uddiURL;
		_uddiNaming = new UDDINaming(_uddiURL);
		clearTransports();
		Dialog.IO().debug(this.getClass().getSimpleName(), "BrokerPort created");
	}
	
	private TransporterClient transporter(String companyName) throws JAXRException{
		Dialog.IO().debug("Transporter","Getting transporter from uddi");
		String endpoint = _uddiNaming.lookup(companyName);
		
		if(endpoint != null){
			try{
				Dialog.IO().debug("Transporter","Endpoint received");
				TransporterClient client = new TransporterClient(endpoint);
				Dialog.IO().debug("Transporter","ENDPOINT: " + endpoint + "\nPING: " + client.ping());
				Dialog.IO().debug("Transporter","Client found and valid");
				return client;
			}catch(Exception e){
				Dialog.IO().debug("Transporter","Client found but it's invalid");
				Dialog.IO().debug("Transporter","Connection refused");
				return null;
			}
		}
		return null;
	}
	private Map<String, TransporterClient> transporters(){
		Dialog.IO().debug("Transporters","Getting all transporters available on uddi");
		Map<String, TransporterClient> clients = new HashMap<String, TransporterClient>();
		try {
			Dialog.IO().debug("Transporters","Looking on UDDI server");
			Collection<String> endpoints = _uddiNaming.list("UpaTransporter%");
			Dialog.IO().debug("Transporters","UDDI server answered");
			if(endpoints != null){
				Dialog.IO().debug("Transporters","Iterating over endpoints received");
				for(String endpoint : endpoints){
					try{
						Dialog.IO().debug("Transporters","ENDPOINT: " + endpoint);
						Dialog.IO().debug("Transporters","Trying to ping client to check if it's alive");
						TransporterClient client = new TransporterClient(endpoint);
						Dialog.IO().debug("Transporters","Client is alive and ping response is: " + client.ping());
						clients.put(endpoint,client);
						Dialog.IO().debug("Transporters","Client found and it's valid");
					}catch(Exception e){
						Dialog.IO().debug("Transporters","Client found and invalid");
						Dialog.IO().debug("Transporters","Connection refused");
					}
				}
			}
		} catch (JAXRException e) {
			e.printStackTrace();
		}
		return clients;		
	}
	
    /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ping", targetNamespace = "http://ws.broker.upa.pt/", className = "pt.upa.broker.ws.Ping")
    @ResponseWrapper(localName = "pingResponse", targetNamespace = "http://ws.broker.upa.pt/", className = "pt.upa.broker.ws.PingResponse")
    @Action(input = "http://ws.broker.upa.pt/BrokerPort/pingRequest", output = "http://ws.broker.upa.pt/BrokerPort/pingResponse")
    public String ping(
        @WebParam(name = "name", targetNamespace = "")
        String name){
		String result = new String("PING!\n");
		Map<String, TransporterClient> transporters = transporters();
		Dialog.IO().debug("[     PING     ]  SIZE OF TRANSPORTERS:" + transporters.size());
    	for(TransporterClient client : transporters.values()){
    		String response = client.ping();
    		Dialog.IO().debug("[     PING     ]  client's response: " + response);
    		result += response;
    	}
		Dialog.IO().debug("[     PING     ]  Returning ping response");
    	return result;
    }

    /**
     * 
     * @param price
     * @param origin
     * @param destination
     * @return
     *     returns java.lang.String
     * @throws InvalidPriceFault_Exception
     * @throws UnavailableTransportPriceFault_Exception
     * @throws UnknownLocationFault_Exception
     * @throws UnavailableTransportFault_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "requestTransport", targetNamespace = "http://ws.broker.upa.pt/", className = "pt.upa.broker.ws.RequestTransport")
    @ResponseWrapper(localName = "requestTransportResponse", targetNamespace = "http://ws.broker.upa.pt/", className = "pt.upa.broker.ws.RequestTransportResponse")
    @Action(input = "http://ws.broker.upa.pt/BrokerPort/requestTransportRequest", output = "http://ws.broker.upa.pt/BrokerPort/requestTransportResponse", fault = {
        @FaultAction(className = UnknownLocationFault_Exception.class, value = "http://ws.broker.upa.pt/BrokerPort/requestTransport/Fault/UnknownLocationFault"),
        @FaultAction(className = InvalidPriceFault_Exception.class, value = "http://ws.broker.upa.pt/BrokerPort/requestTransport/Fault/InvalidPriceFault"),
        @FaultAction(className = UnavailableTransportFault_Exception.class, value = "http://ws.broker.upa.pt/BrokerPort/requestTransport/Fault/UnavailableTransportFault"),
        @FaultAction(className = UnavailableTransportPriceFault_Exception.class, value = "http://ws.broker.upa.pt/BrokerPort/requestTransport/Fault/UnavailableTransportPriceFault")
    })
    public String requestTransport(
        @WebParam(name = "origin", targetNamespace = "")
        String origin,
        @WebParam(name = "destination", targetNamespace = "")
        String destination,
        @WebParam(name = "price", targetNamespace = "")
        int price)
        throws InvalidPriceFault_Exception, UnavailableTransportFault_Exception, UnavailableTransportPriceFault_Exception, UnknownLocationFault_Exception
    {
    	if(price < 0){
    		Dialog.IO().debug("requestTransport", "Price is lower than zero. Aborted");
    		throw new InvalidPriceFault_Exception("Price lower than zero: " + price, new InvalidPriceFault());
    	}
		
    	boolean originNotFound = true;
		boolean destinationNotFound = true;
		
		for(String s : BrokerPort.NORTE){
			if(s.equals(origin)) originNotFound = false;
			if(s.equals(destination)) destinationNotFound = false;
		}
		for(String s : BrokerPort.CENTRO){
			if(s.equals(origin)) originNotFound = false;
			if(s.equals(destination)) destinationNotFound = false;
		}
		for(String s : BrokerPort.SUL){
			if(s.equals(origin)) originNotFound = false;
			if(s.equals(destination)) destinationNotFound = false;
		}

		if(originNotFound){
			Dialog.IO().debug("requestTransport", "Origin not found: " + origin);
			throw new UnknownLocationFault_Exception("Origin unknown: " + origin, new UnknownLocationFault());
		}
		if(destinationNotFound){
			Dialog.IO().debug("requestTransport", "Destination not found: " + destination);
			throw new UnknownLocationFault_Exception("Destination unknown: " + destination, new UnknownLocationFault());
		}
    	
		//in this moment the origin destination and price is valid
		//so we will look for an offer in the transporters
		Dialog.IO().debug("requestTransport", "Job is being requested to transporters");
		
		//Init TransportView
		Dialog.IO().debug("requestTransport", "Creating transportview");
		TransportView transport = new TransportView();
		
		Dialog.IO().debug("requestTransport", "Setting origin");
		transport.setOrigin(origin);
		Dialog.IO().debug("requestTransport", "Origin set");
		
		Dialog.IO().debug("requestTransport", "Setting destination");
		transport.setDestination(destination);
		Dialog.IO().debug("requestTransport", "Destination set");
		
		//Get all transporters available
		Dialog.IO().debug("requestTransport", "Getting transporters");
		Map<String, TransporterClient> transporters = transporters();
		Dialog.IO().debug("requestTransport", "Got transporters");
		List<JobView> offers = new ArrayList<JobView>();
		
		//Get all offers from all transporters
		for(TransporterClient client : transporters.values()){
			Dialog.IO().debug("requestTransport", "Iterating over transporters companies");
    		JobView j;
    		Dialog.IO().debug("requestTransport", "Requesting job to transporter");
			try {
	    		Dialog.IO().debug("requestTransport", "Connecting to client requesting job");
				j = client.requestJob(origin, destination, price);
				if(j == null){
					Dialog.IO().debug("requestTransport", "Job received is null");
					continue;
				}
				Dialog.IO().debug("requestTransport", "Job received and is not null");
			} catch (BadLocationFault_Exception | BadPriceFault_Exception e) {
				continue;
			}
			Dialog.IO().debug("requestTransport", "Adding returned job to offers");
    		offers.add(j);
    	}
		
		Dialog.IO().debug("requestTransport", "Setting state after getting offers");
		transport.setState(TransportStateView.REQUESTED);
		Dialog.IO().debug("requestTransport", "State set");
		
		if(offers.size() == 0){
			Dialog.IO().debug("requestTransport", "No offers received");
			throw new UnavailableTransportFault_Exception("There is no transporter available for this travel",
				new UnavailableTransportFault());
		}
		
		Dialog.IO().debug("requestTransport", "Sorting offers by price");
		//Sort offers by price
		Collections.sort(offers, new Comparator<JobView>(){
			public int compare(JobView j1, JobView j2){
				return j1.getJobPrice() - j2.getJobPrice();
			}
		});
		Dialog.IO().debug("requestTransport", "Offers sorted by price");
		
		Dialog.IO().debug("requestTransport", offers.size() + " available jobs");
		boolean accepted = false;
		
		Dialog.IO().debug("requestTransport", "Iterating over offers to accept one");
		for(JobView j : offers){
	    	JobView returnJobView;
			try {
				returnJobView = transporter(j.getCompanyName()).decideJob(j.getJobIdentifier(), true);
				if(returnJobView == null) continue; //FIXME
		    	
		    	if(returnJobView.getJobState() == JobStateView.ACCEPTED){
		    		j.setJobState(JobStateView.ACCEPTED);
		    		transport.setTransporterCompany(j.getCompanyName());
		    		transport.setPrice(j.getJobPrice());
		    		transport.setId(j.getJobIdentifier());
		    		transport.setState(TransportStateView.BOOKED);
		    		Dialog.IO().debug("requestTransport", "Transport is now booked on the transport company");
		        	_transports.put(transport.getId(), transport);
		        	accepted = true;
		    	}
			} catch (BadJobFault_Exception | JAXRException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}

	    	
		}
				
		//For all the other reject the job
		for(JobView j : offers){
			if(j.getJobState() != JobStateView.ACCEPTED)
				try {
					transporter(j.getCompanyName()).decideJob(j.getJobIdentifier(), false);
				} catch (BadJobFault_Exception | JAXRException e) {
					// TODO Auto-generated catch block
					//FIXME need to check return and retry if return is null
					//e.printStackTrace();
				}
		}

		if(!accepted){
			return null;
		}
    	return transport.getId();
    }

    /**
     * 
     * @param id
     * @return
     *     returns pt.upa.broker.ws.TransportView
     * @throws UnknownTransportFault_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "viewTransport", targetNamespace = "http://ws.broker.upa.pt/", className = "pt.upa.broker.ws.ViewTransport")
    @ResponseWrapper(localName = "viewTransportResponse", targetNamespace = "http://ws.broker.upa.pt/", className = "pt.upa.broker.ws.ViewTransportResponse")
    @Action(input = "http://ws.broker.upa.pt/BrokerPort/viewTransportRequest", output = "http://ws.broker.upa.pt/BrokerPort/viewTransportResponse", fault = {
        @FaultAction(className = UnknownTransportFault_Exception.class, value = "http://ws.broker.upa.pt/BrokerPort/viewTransport/Fault/UnknownTransportFault")
    })
    public TransportView viewTransport(
        @WebParam(name = "id", targetNamespace = "")
        String id)
        throws UnknownTransportFault_Exception{
    	Dialog.IO().debug("viewTransport", "Getting transport object");
    	TransportView transport = _transports.get(id);
    	if(transport == null){ Dialog.IO().debug("viewTransport", "There is no such transport with this id " + id); return null; }
    	if(transport.getState().value().equals("COMPLETED")){
    		Dialog.IO().debug("viewTransport", "Transport is completed so there is no need to check with transporter company");
    		return transport;
    	}
    	Dialog.IO().debug("viewTransport", "Transport is not complete, so broker will check updates with transporter company");
    	//Need to update job state from transporters info
    	try {
    		Dialog.IO().debug("viewTransport", "trying to get Transporter company");
			TransporterClient client = transporter(transport.getTransporterCompany());
			if(client == null){
				Dialog.IO().debug("viewTransport", "There is not a transporter company with this name: " + transport.getTransporterCompany());
				return null;
			}
			Dialog.IO().debug("viewTransport", "Will connect to transporter webService");
			JobView job = client.jobStatus(id);
			Dialog.IO().debug("viewTransport", "Response received from transporter company");
			transport.setState(TransportStateView.fromValue(job.getJobState().value()));
			Dialog.IO().debug("viewTransport", "New JobState: " + job.getJobState().value());
			return transport;
		} catch (JAXRException e) {
			Dialog.IO().debug("viewTransport", "Some exception: " + e);
			//e.printStackTrace();
			return null;
		}
    }

    /**
     * 
     * @return
     *     returns java.util.List<pt.upa.broker.ws.TransportView>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listTransports", targetNamespace = "http://ws.broker.upa.pt/", className = "pt.upa.broker.ws.ListTransports")
    @ResponseWrapper(localName = "listTransportsResponse", targetNamespace = "http://ws.broker.upa.pt/", className = "pt.upa.broker.ws.ListTransportsResponse")
    @Action(input = "http://ws.broker.upa.pt/BrokerPort/listTransportsRequest", output = "http://ws.broker.upa.pt/BrokerPort/listTransportsResponse")
    public List<TransportView> listTransports(){
    	Dialog.IO().debug("listTransports", "Listing transports");
    	return new ArrayList<TransportView>(_transports.values());
    	//FIXME
    	//Need to update transports.values();
    }

    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "clearTransports", targetNamespace = "http://ws.broker.upa.pt/", className = "pt.upa.broker.ws.ClearTransports")
    @ResponseWrapper(localName = "clearTransportsResponse", targetNamespace = "http://ws.broker.upa.pt/", className = "pt.upa.broker.ws.ClearTransportsResponse")
    @Action(input = "http://ws.broker.upa.pt/BrokerPort/clearTransportsRequest", output = "http://ws.broker.upa.pt/BrokerPort/clearTransportsResponse")
    public void clearTransports(){
    	Dialog.IO().debug("clearTransports","cleaning transport list");
		_transports = new HashMap<String, TransportView>();
    	Dialog.IO().debug("clearTransports","transport list clean");
    }

}
